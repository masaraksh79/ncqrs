[General]
network  = P2MP
num-rngs = 3
record-eventlog = false
check-signals = true
debug-on-errors = false

# General FDD-TDMA scheme params
sim-time-limit 		= 500000s
P2MP.tdmaTs			= 1

# Traffic generation load models 
# Performed by BS on behalf of all SSs (omitting the shared access requests)
# streamType 0 - Periodic const size stream
P2MP.bs.streamType = 0
P2MP.bs.tfcLoad = "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1" #100u
# General stream parameters (other models are supported as well...)
P2MP.bs.infTTL = true

# SS channels estimation parameters
P2MP.bs.pErrInitial	= 0.1	# Initial packet error rate
P2MP.bs.pErrEWMA 	= 0.1 	# EWMA alfa St=alfa*Yt+(1-alfa)*St-1
P2MP.bs.maVioFactor = 1000 	# Same as 0.01, implemented more efficiently


# RLQ scheduler (2) Baseline (DBP=3,CaOpt=4,DBRR=5) 
P2MP.bs.schedMethod 	= 2

P2MP.bs.rewardReduce 	= -10				# degradation penalty
P2MP.bs.rewardViolate 	= -70				# violation penalty
P2MP.bs.rewardSlots	= -0.02				# slot overallocation penalty
P2MP.bs.rl_q_gamma 	= 0.95				# discount factor
P2MP.bs.rl_q_alfa 	= 0.0001			# learning factor
P2MP.bs.trimRank 	= 1.2				# Soft rank factor for RBT


P2MP.bs.streamM = 3	# (m,k) setting will be used for all streams the same
P2MP.bs.streamK = 4
P2MP.bs.streamMArr = "0"
P2MP.bs.streamKArr = "0"

P2MP.ss[*].B   = 0.4
P2MP.ss[*].EH1 = 5
P2MP.ss[*].eB = 1

# finding convergence
P2MP.bs.conv_startx = 0 	# number of TSs where we start waiting for the cross-over point
P2MP.bs.conv_upfac 	= 0.8   # upper limit factor, i.e. mean * fact <= convergence zone 
P2MP.bs.conv_batch 	= 800

# unused 
P2MP.bs.slots_per_usr = 6
P2MP.bs.latencySFs = 10
# (AC) Critic - value V(s) learning rate (the discount rate)
P2MP.bs.rl_ac_alfa = 0.376			
# (AC) Actor - learning rate for the preference metric
P2MP.bs.rl_ac_beta = 0.376		
# Average state reward update	
P2MP.bs.rl_ac_gamma = 0.96
# (Debug) A-C stats (action pref)
P2MP.bs.actPrefNodeID = 0

# parameters to measure convergence
P2MP.ss[*].pPERch		= 0.5
P2MP.ss[*].pPERtime		= 0 

[Config VioRateST5U10R]
description = "10 retransmit slots @ 5 units over static homogeneous channel"
P2MP.bs.schedMethod 	= 	${2,3,4}		
P2MP.numSSs 			= 5 	# number of sub stations (SS)		
P2MP.tdmaSF 			= 15	# superframe [slots]
P2MP.bs.maxChunks 		= 15	# allocation cells in base station packet
P2MP.bs.retxSlots 		= 10		# maximum number of slots for retransmission
P2MP.bs.retxChunks 		= 10		# maximum number of chunks for retransmission
P2MP.chanType 			= 0		# Static (Markov=1)
P2MP.ss[*].B   = 0.5	# don't use B < 0.3, max PER allowed is 0.2 (20% errors) !!!
P2MP.ss[*].EH1 = 250
P2MP.ss[*].eB = 1		# don't use EH1 < 5
P2MP.ss[*].pPERch		= 0
P2MP.ss[*].pPERtime		= 0 
#P2MP.pPER 				= "0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1 0.1"	# packet error rates per node
#P2MP.pPER 				= "0.1 0.25 0.15 0.22 0.35 0.3 0.25 0.11 0.08 0.12"	# packet error rates per node
P2MP.pPER 				= "0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2"	# packet error rates per node
#P2MP.pPER 				= "0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3 0.3"	# packet error rates per node
#P2MP.pPER 				= "0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4 0.4"	# packet error rates per node
#P2MP.pPER 				= "0.45 0.45 0.45 0.45 0.45 0.45 0.45 0.45 0.45 0.45"	# packet error rates per node
seed-set=${foo=7}


#P2MP.bs.tfcLoad 		= "1 1 1 1 1" # normal data pkts per SS in 1 superframe		
# Convergence
# Static channel P=0.2 pHom 5U 10R
# P_initial=0.2 SF=15
# RLQ->960 - 1600 TSs

# Static channel P=0.2 pHom 10U 20R
# P_initial=0.2 SF=30
# RLQ->2300 - 3700 TSs

# Static channel P=0.2 pHom 15U 30R
# P_initial=0.2 SF=45
# RLQ->4400 - 7200 TSs

# Static channel P=0.2 pHom 20U 40R
# P_initial=0.2 SF=60
# Deviation on 40 seeds 1400-5600 TSs to reach Vt=0.03

# Static channel P=0.2 pHom 25U 50R
# P_initial=0.2 SF=75
# Deviation on 40 seeds 2700-7000 TSs to reach Vt=0.03
